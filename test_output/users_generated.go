// Code generated by dbutil-gen. DO NOT EDIT.
// Source: table users

package repositories

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxpool"
)

// Users represents a row from the users table
type Users struct {
	Id                uuid.UUID          `json:"id" db:"id"`
	Name              string             `json:"name" db:"name"`
	Email             string             `json:"email" db:"email"`
	PasswordHash      string             `json:"password_hash" db:"password_hash"`
	IsActive          pgtype.Bool        `json:"is_active" db:"is_active"`
	CreatedAt         pgtype.Timestamptz `json:"created_at" db:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at" db:"updated_at"`
	LastLogin         pgtype.Timestamptz `json:"last_login" db:"last_login"`
	Metadata          *json.RawMessage   `json:"metadata" db:"metadata"`
	Age               pgtype.Int4        `json:"age" db:"age"`
	Balance           pgtype.Float8      `json:"balance" db:"balance"`
	ProfilePictureUrl pgtype.Text        `json:"profile_picture_url" db:"profile_picture_url"`
}

// GetID returns the ID of the Users for pagination
func (u Users) GetID() uuid.UUID {
	return u.Id
}

// UsersRepository provides database operations for users
type UsersRepository struct {
	conn *pgxpool.Pool
}

// NewUsersRepository creates a new UsersRepository
func NewUsersRepository(conn *pgxpool.Pool) *UsersRepository {
	return &UsersRepository{
		conn: conn,
	}
}

// GetByID retrieves a Users by its ID
func (r *UsersRepository) GetByID(ctx context.Context, id uuid.UUID) (*Users, error) {
	query := `
		SELECT id, name, email, password_hash, is_active, created_at, updated_at, last_login, metadata, age, balance, profile_picture_url
		FROM users
		WHERE id = $1
	`

	var u Users
	err := r.conn.QueryRow(ctx, query, id).Scan(&u.Id, &u.Name, &u.Email, &u.PasswordHash, &u.IsActive, &u.CreatedAt, &u.UpdatedAt, &u.LastLogin, &u.Metadata, &u.Age, &u.Balance, &u.ProfilePictureUrl)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// CreateUsersParams holds parameters for creating a Users
type CreateUsersParams struct {
	Name              string             `json:"name" db:"name"`
	Email             string             `json:"email" db:"email"`
	PasswordHash      string             `json:"password_hash" db:"password_hash"`
	LastLogin         pgtype.Timestamptz `json:"last_login" db:"last_login"`
	Metadata          *json.RawMessage   `json:"metadata" db:"metadata"`
	Age               pgtype.Int4        `json:"age" db:"age"`
	Balance           pgtype.Float8      `json:"balance" db:"balance"`
	ProfilePictureUrl pgtype.Text        `json:"profile_picture_url" db:"profile_picture_url"`
}

// Create creates a new Users
func (r *UsersRepository) Create(ctx context.Context, params CreateUsersParams) (*Users, error) {
	query := `
		INSERT INTO users (name, email, password_hash, last_login, metadata, age, balance, profile_picture_url)
		VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
		RETURNING id, name, email, password_hash, is_active, created_at, updated_at, last_login, metadata, age, balance, profile_picture_url
	`

	var u Users
	err := r.conn.QueryRow(ctx, query, params.Name, params.Email, params.PasswordHash, params.LastLogin, params.Metadata, params.Age, params.Balance, params.ProfilePictureUrl).Scan(&u.Id, &u.Name, &u.Email, &u.PasswordHash, &u.IsActive, &u.CreatedAt, &u.UpdatedAt, &u.LastLogin, &u.Metadata, &u.Age, &u.Balance, &u.ProfilePictureUrl)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UpdateUsersParams holds parameters for updating a Users
type UpdateUsersParams struct {
	Name              string             `json:"name" db:"name"`
	Email             string             `json:"email" db:"email"`
	PasswordHash      string             `json:"password_hash" db:"password_hash"`
	IsActive          pgtype.Bool        `json:"is_active" db:"is_active"`
	CreatedAt         pgtype.Timestamptz `json:"created_at" db:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at" db:"updated_at"`
	LastLogin         pgtype.Timestamptz `json:"last_login" db:"last_login"`
	Metadata          *json.RawMessage   `json:"metadata" db:"metadata"`
	Age               pgtype.Int4        `json:"age" db:"age"`
	Balance           pgtype.Float8      `json:"balance" db:"balance"`
	ProfilePictureUrl pgtype.Text        `json:"profile_picture_url" db:"profile_picture_url"`
}

// Update updates a Users by ID
func (r *UsersRepository) Update(ctx context.Context, id uuid.UUID, params UpdateUsersParams) (*Users, error) {
	query := `
		UPDATE users
		SET name = $1, email = $2, password_hash = $3, is_active = $4, created_at = $5, updated_at = $6, last_login = $7, metadata = $8, age = $9, balance = $10, profile_picture_url = $11
		WHERE id = $12
		RETURNING id, name, email, password_hash, is_active, created_at, updated_at, last_login, metadata, age, balance, profile_picture_url
	`

	var u Users
	err := r.conn.QueryRow(ctx, query, params.Name, params.Email, params.PasswordHash, params.IsActive, params.CreatedAt, params.UpdatedAt, params.LastLogin, params.Metadata, params.Age, params.Balance, params.ProfilePictureUrl, id).Scan(&u.Id, &u.Name, &u.Email, &u.PasswordHash, &u.IsActive, &u.CreatedAt, &u.UpdatedAt, &u.LastLogin, &u.Metadata, &u.Age, &u.Balance, &u.ProfilePictureUrl)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// Delete deletes a Users by ID
func (r *UsersRepository) Delete(ctx context.Context, id uuid.UUID) error {
	query := `
		DELETE FROM users
		WHERE id = $1
	`

	_, err := r.conn.Exec(ctx, query, id)
	return err
}

// List retrieves all Userss
func (r *UsersRepository) List(ctx context.Context) ([]Users, error) {
	query := `
		SELECT id, name, email, password_hash, is_active, created_at, updated_at, last_login, metadata, age, balance, profile_picture_url
		FROM users
		ORDER BY id ASC
	`

	rows, err := r.conn.Query(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var results []Users
	for rows.Next() {
		var u Users
		err := rows.Scan(&u.Id, &u.Name, &u.Email, &u.PasswordHash, &u.IsActive, &u.CreatedAt, &u.UpdatedAt, &u.LastLogin, &u.Metadata, &u.Age, &u.Balance, &u.ProfilePictureUrl)
		if err != nil {
			return nil, err
		}
		results = append(results, u)
	}

	return results, rows.Err()
}

// ListPaginated retrieves Userss with cursor-based pagination
func (r *UsersRepository) ListPaginated(ctx context.Context, params PaginationParams) (*PaginationResult[Users], error) {
	// Validate parameters
	if err := validatePaginationParams(params); err != nil {
		return nil, err
	}

	// Set default limit
	limit := params.Limit
	if limit <= 0 {
		limit = 20
	}
	if limit > 100 {
		limit = 100
	}

	// Parse cursor if provided
	var cursor *uuid.UUID
	if params.Cursor != "" {
		cursorUUID, err := decodeCursor(params.Cursor)
		if err != nil {
			return nil, fmt.Errorf("invalid cursor format: %w", err)
		}
		cursor = &cursorUUID
	}

	// Execute query with limit + 1 to check if there are more items
	query := `
		SELECT id, name, email, password_hash, is_active, created_at, updated_at, last_login, metadata, age, balance, profile_picture_url
		FROM users
		WHERE ($1::uuid IS NULL OR id > $1)
		ORDER BY id ASC
		LIMIT $2
	`

	rows, err := r.conn.Query(ctx, query, cursor, int32(limit+1))
	if err != nil {
		return nil, fmt.Errorf("pagination query failed: %w", err)
	}
	defer rows.Close()

	var items []Users
	for rows.Next() {
		var u Users
		err := rows.Scan(&u.Id, &u.Name, &u.Email, &u.PasswordHash, &u.IsActive, &u.CreatedAt, &u.UpdatedAt, &u.LastLogin, &u.Metadata, &u.Age, &u.Balance, &u.ProfilePictureUrl)
		if err != nil {
			return nil, err
		}
		items = append(items, u)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}

	// Check if there are more items
	hasMore := len(items) > limit
	if hasMore {
		items = items[:limit] // Remove the extra item
	}

	// Generate next cursor if there are more items
	var nextCursor string
	if hasMore && len(items) > 0 {
		lastItem := items[len(items)-1]
		nextCursor = encodeCursor(lastItem.GetID())
	}

	return &PaginationResult[Users]{
		Items:      items,
		HasMore:    hasMore,
		NextCursor: nextCursor,
	}, nil
}
