// Code generated by dbutil-gen. DO NOT EDIT.
// Source: table data_types_test

package repositories

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxpool"
)

// DataTypesTest represents a row from the data_types_test table
type DataTypesTest struct {
	Id                uuid.UUID          `json:"id" db:"id"`
	TextField         pgtype.Text        `json:"text_field" db:"text_field"`
	VarcharField      pgtype.Text        `json:"varchar_field" db:"varchar_field"`
	CharField         pgtype.Text        `json:"char_field" db:"char_field"`
	SmallintField     pgtype.Int2        `json:"smallint_field" db:"smallint_field"`
	IntegerField      pgtype.Int4        `json:"integer_field" db:"integer_field"`
	BigintField       pgtype.Int8        `json:"bigint_field" db:"bigint_field"`
	DecimalField      pgtype.Float8      `json:"decimal_field" db:"decimal_field"`
	NumericField      pgtype.Float8      `json:"numeric_field" db:"numeric_field"`
	RealField         pgtype.Float4      `json:"real_field" db:"real_field"`
	DoubleField       pgtype.Float8      `json:"double_field" db:"double_field"`
	BooleanField      pgtype.Bool        `json:"boolean_field" db:"boolean_field"`
	DateField         pgtype.Timestamptz `json:"date_field" db:"date_field"`
	TimeField         pgtype.Timestamptz `json:"time_field" db:"time_field"`
	TimestampField    pgtype.Timestamptz `json:"timestamp_field" db:"timestamp_field"`
	TimestamptzField  pgtype.Timestamptz `json:"timestamptz_field" db:"timestamptz_field"`
	IntervalField     pgtype.Text        `json:"interval_field" db:"interval_field"`
	UuidField         pgtype.UUID        `json:"uuid_field" db:"uuid_field"`
	JsonField         pgtype.JSON        `json:"json_field" db:"json_field"`
	JsonbField        pgtype.JSON        `json:"jsonb_field" db:"jsonb_field"`
	TextArrayField    []pgtype.Text      `json:"text_array_field" db:"text_array_field"`
	IntegerArrayField []pgtype.Int4      `json:"integer_array_field" db:"integer_array_field"`
	UuidArrayField    []pgtype.UUID      `json:"uuid_array_field" db:"uuid_array_field"`
	InetField         pgtype.Text        `json:"inet_field" db:"inet_field"`
	CidrField         pgtype.Text        `json:"cidr_field" db:"cidr_field"`
	MacaddrField      pgtype.Text        `json:"macaddr_field" db:"macaddr_field"`
	ByteaField        pgtype.Bytea       `json:"bytea_field" db:"bytea_field"`
	XmlField          pgtype.Text        `json:"xml_field" db:"xml_field"`
	NullableText      pgtype.Text        `json:"nullable_text" db:"nullable_text"`
	NullableInteger   pgtype.Int4        `json:"nullable_integer" db:"nullable_integer"`
	NullableBoolean   pgtype.Bool        `json:"nullable_boolean" db:"nullable_boolean"`
	NullableTimestamp pgtype.Timestamptz `json:"nullable_timestamp" db:"nullable_timestamp"`
	NullableUuid      pgtype.UUID        `json:"nullable_uuid" db:"nullable_uuid"`
	NullableJsonb     pgtype.JSON        `json:"nullable_jsonb" db:"nullable_jsonb"`
	CreatedAt         pgtype.Timestamptz `json:"created_at" db:"created_at"`
}

// GetID returns the ID of the DataTypesTest for pagination
func (d DataTypesTest) GetID() uuid.UUID {
	return d.Id
}

// DataTypesTestRepository provides database operations for data_types_test
type DataTypesTestRepository struct {
	conn *pgxpool.Pool
}

// NewDataTypesTestRepository creates a new DataTypesTestRepository
func NewDataTypesTestRepository(conn *pgxpool.Pool) *DataTypesTestRepository {
	return &DataTypesTestRepository{
		conn: conn,
	}
}

// GetByID retrieves a DataTypesTest by its ID
func (r *DataTypesTestRepository) GetByID(ctx context.Context, id uuid.UUID) (*DataTypesTest, error) {
	query := `
		SELECT id, text_field, varchar_field, char_field, smallint_field, integer_field, bigint_field, decimal_field, numeric_field, real_field, double_field, boolean_field, date_field, time_field, timestamp_field, timestamptz_field, interval_field, uuid_field, json_field, jsonb_field, text_array_field, integer_array_field, uuid_array_field, inet_field, cidr_field, macaddr_field, bytea_field, xml_field, nullable_text, nullable_integer, nullable_boolean, nullable_timestamp, nullable_uuid, nullable_jsonb, created_at
		FROM data_types_test
		WHERE id = $1
	`

	var d DataTypesTest
	err := r.conn.QueryRow(ctx, query, id).Scan(&d.Id, &d.TextField, &d.VarcharField, &d.CharField, &d.SmallintField, &d.IntegerField, &d.BigintField, &d.DecimalField, &d.NumericField, &d.RealField, &d.DoubleField, &d.BooleanField, &d.DateField, &d.TimeField, &d.TimestampField, &d.TimestamptzField, &d.IntervalField, &d.UuidField, &d.JsonField, &d.JsonbField, &d.TextArrayField, &d.IntegerArrayField, &d.UuidArrayField, &d.InetField, &d.CidrField, &d.MacaddrField, &d.ByteaField, &d.XmlField, &d.NullableText, &d.NullableInteger, &d.NullableBoolean, &d.NullableTimestamp, &d.NullableUuid, &d.NullableJsonb, &d.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &d, nil
}

// CreateDataTypesTestParams holds parameters for creating a DataTypesTest
type CreateDataTypesTestParams struct {
	TextField         pgtype.Text        `json:"text_field" db:"text_field"`
	VarcharField      pgtype.Text        `json:"varchar_field" db:"varchar_field"`
	CharField         pgtype.Text        `json:"char_field" db:"char_field"`
	SmallintField     pgtype.Int2        `json:"smallint_field" db:"smallint_field"`
	IntegerField      pgtype.Int4        `json:"integer_field" db:"integer_field"`
	BigintField       pgtype.Int8        `json:"bigint_field" db:"bigint_field"`
	DecimalField      pgtype.Float8      `json:"decimal_field" db:"decimal_field"`
	NumericField      pgtype.Float8      `json:"numeric_field" db:"numeric_field"`
	RealField         pgtype.Float4      `json:"real_field" db:"real_field"`
	DoubleField       pgtype.Float8      `json:"double_field" db:"double_field"`
	BooleanField      pgtype.Bool        `json:"boolean_field" db:"boolean_field"`
	DateField         pgtype.Timestamptz `json:"date_field" db:"date_field"`
	TimeField         pgtype.Timestamptz `json:"time_field" db:"time_field"`
	TimestampField    pgtype.Timestamptz `json:"timestamp_field" db:"timestamp_field"`
	TimestamptzField  pgtype.Timestamptz `json:"timestamptz_field" db:"timestamptz_field"`
	IntervalField     pgtype.Text        `json:"interval_field" db:"interval_field"`
	UuidField         pgtype.UUID        `json:"uuid_field" db:"uuid_field"`
	JsonField         pgtype.JSON        `json:"json_field" db:"json_field"`
	JsonbField        pgtype.JSON        `json:"jsonb_field" db:"jsonb_field"`
	TextArrayField    []pgtype.Text      `json:"text_array_field" db:"text_array_field"`
	IntegerArrayField []pgtype.Int4      `json:"integer_array_field" db:"integer_array_field"`
	UuidArrayField    []pgtype.UUID      `json:"uuid_array_field" db:"uuid_array_field"`
	InetField         pgtype.Text        `json:"inet_field" db:"inet_field"`
	CidrField         pgtype.Text        `json:"cidr_field" db:"cidr_field"`
	MacaddrField      pgtype.Text        `json:"macaddr_field" db:"macaddr_field"`
	ByteaField        pgtype.Bytea       `json:"bytea_field" db:"bytea_field"`
	XmlField          pgtype.Text        `json:"xml_field" db:"xml_field"`
	NullableText      pgtype.Text        `json:"nullable_text" db:"nullable_text"`
	NullableInteger   pgtype.Int4        `json:"nullable_integer" db:"nullable_integer"`
	NullableBoolean   pgtype.Bool        `json:"nullable_boolean" db:"nullable_boolean"`
	NullableTimestamp pgtype.Timestamptz `json:"nullable_timestamp" db:"nullable_timestamp"`
	NullableUuid      pgtype.UUID        `json:"nullable_uuid" db:"nullable_uuid"`
	NullableJsonb     pgtype.JSON        `json:"nullable_jsonb" db:"nullable_jsonb"`
}

// Create creates a new DataTypesTest
func (r *DataTypesTestRepository) Create(ctx context.Context, params CreateDataTypesTestParams) (*DataTypesTest, error) {
	query := `
		INSERT INTO data_types_test (text_field, varchar_field, char_field, smallint_field, integer_field, bigint_field, decimal_field, numeric_field, real_field, double_field, boolean_field, date_field, time_field, timestamp_field, timestamptz_field, interval_field, uuid_field, json_field, jsonb_field, text_array_field, integer_array_field, uuid_array_field, inet_field, cidr_field, macaddr_field, bytea_field, xml_field, nullable_text, nullable_integer, nullable_boolean, nullable_timestamp, nullable_uuid, nullable_jsonb)
		VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33)
		RETURNING id, text_field, varchar_field, char_field, smallint_field, integer_field, bigint_field, decimal_field, numeric_field, real_field, double_field, boolean_field, date_field, time_field, timestamp_field, timestamptz_field, interval_field, uuid_field, json_field, jsonb_field, text_array_field, integer_array_field, uuid_array_field, inet_field, cidr_field, macaddr_field, bytea_field, xml_field, nullable_text, nullable_integer, nullable_boolean, nullable_timestamp, nullable_uuid, nullable_jsonb, created_at
	`

	var d DataTypesTest
	err := r.conn.QueryRow(ctx, query, params.TextField, params.VarcharField, params.CharField, params.SmallintField, params.IntegerField, params.BigintField, params.DecimalField, params.NumericField, params.RealField, params.DoubleField, params.BooleanField, params.DateField, params.TimeField, params.TimestampField, params.TimestamptzField, params.IntervalField, params.UuidField, params.JsonField, params.JsonbField, params.TextArrayField, params.IntegerArrayField, params.UuidArrayField, params.InetField, params.CidrField, params.MacaddrField, params.ByteaField, params.XmlField, params.NullableText, params.NullableInteger, params.NullableBoolean, params.NullableTimestamp, params.NullableUuid, params.NullableJsonb).Scan(&d.Id, &d.TextField, &d.VarcharField, &d.CharField, &d.SmallintField, &d.IntegerField, &d.BigintField, &d.DecimalField, &d.NumericField, &d.RealField, &d.DoubleField, &d.BooleanField, &d.DateField, &d.TimeField, &d.TimestampField, &d.TimestamptzField, &d.IntervalField, &d.UuidField, &d.JsonField, &d.JsonbField, &d.TextArrayField, &d.IntegerArrayField, &d.UuidArrayField, &d.InetField, &d.CidrField, &d.MacaddrField, &d.ByteaField, &d.XmlField, &d.NullableText, &d.NullableInteger, &d.NullableBoolean, &d.NullableTimestamp, &d.NullableUuid, &d.NullableJsonb, &d.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &d, nil
}

// UpdateDataTypesTestParams holds parameters for updating a DataTypesTest
type UpdateDataTypesTestParams struct {
	TextField         pgtype.Text        `json:"text_field" db:"text_field"`
	VarcharField      pgtype.Text        `json:"varchar_field" db:"varchar_field"`
	CharField         pgtype.Text        `json:"char_field" db:"char_field"`
	SmallintField     pgtype.Int2        `json:"smallint_field" db:"smallint_field"`
	IntegerField      pgtype.Int4        `json:"integer_field" db:"integer_field"`
	BigintField       pgtype.Int8        `json:"bigint_field" db:"bigint_field"`
	DecimalField      pgtype.Float8      `json:"decimal_field" db:"decimal_field"`
	NumericField      pgtype.Float8      `json:"numeric_field" db:"numeric_field"`
	RealField         pgtype.Float4      `json:"real_field" db:"real_field"`
	DoubleField       pgtype.Float8      `json:"double_field" db:"double_field"`
	BooleanField      pgtype.Bool        `json:"boolean_field" db:"boolean_field"`
	DateField         pgtype.Timestamptz `json:"date_field" db:"date_field"`
	TimeField         pgtype.Timestamptz `json:"time_field" db:"time_field"`
	TimestampField    pgtype.Timestamptz `json:"timestamp_field" db:"timestamp_field"`
	TimestamptzField  pgtype.Timestamptz `json:"timestamptz_field" db:"timestamptz_field"`
	IntervalField     pgtype.Text        `json:"interval_field" db:"interval_field"`
	UuidField         pgtype.UUID        `json:"uuid_field" db:"uuid_field"`
	JsonField         pgtype.JSON        `json:"json_field" db:"json_field"`
	JsonbField        pgtype.JSON        `json:"jsonb_field" db:"jsonb_field"`
	TextArrayField    []pgtype.Text      `json:"text_array_field" db:"text_array_field"`
	IntegerArrayField []pgtype.Int4      `json:"integer_array_field" db:"integer_array_field"`
	UuidArrayField    []pgtype.UUID      `json:"uuid_array_field" db:"uuid_array_field"`
	InetField         pgtype.Text        `json:"inet_field" db:"inet_field"`
	CidrField         pgtype.Text        `json:"cidr_field" db:"cidr_field"`
	MacaddrField      pgtype.Text        `json:"macaddr_field" db:"macaddr_field"`
	ByteaField        pgtype.Bytea       `json:"bytea_field" db:"bytea_field"`
	XmlField          pgtype.Text        `json:"xml_field" db:"xml_field"`
	NullableText      pgtype.Text        `json:"nullable_text" db:"nullable_text"`
	NullableInteger   pgtype.Int4        `json:"nullable_integer" db:"nullable_integer"`
	NullableBoolean   pgtype.Bool        `json:"nullable_boolean" db:"nullable_boolean"`
	NullableTimestamp pgtype.Timestamptz `json:"nullable_timestamp" db:"nullable_timestamp"`
	NullableUuid      pgtype.UUID        `json:"nullable_uuid" db:"nullable_uuid"`
	NullableJsonb     pgtype.JSON        `json:"nullable_jsonb" db:"nullable_jsonb"`
	CreatedAt         pgtype.Timestamptz `json:"created_at" db:"created_at"`
}

// Update updates a DataTypesTest by ID
func (r *DataTypesTestRepository) Update(ctx context.Context, id uuid.UUID, params UpdateDataTypesTestParams) (*DataTypesTest, error) {
	query := `
		UPDATE data_types_test
		SET text_field = $1, varchar_field = $2, char_field = $3, smallint_field = $4, integer_field = $5, bigint_field = $6, decimal_field = $7, numeric_field = $8, real_field = $9, double_field = $10, boolean_field = $11, date_field = $12, time_field = $13, timestamp_field = $14, timestamptz_field = $15, interval_field = $16, uuid_field = $17, json_field = $18, jsonb_field = $19, text_array_field = $20, integer_array_field = $21, uuid_array_field = $22, inet_field = $23, cidr_field = $24, macaddr_field = $25, bytea_field = $26, xml_field = $27, nullable_text = $28, nullable_integer = $29, nullable_boolean = $30, nullable_timestamp = $31, nullable_uuid = $32, nullable_jsonb = $33, created_at = $34
		WHERE id = $35
		RETURNING id, text_field, varchar_field, char_field, smallint_field, integer_field, bigint_field, decimal_field, numeric_field, real_field, double_field, boolean_field, date_field, time_field, timestamp_field, timestamptz_field, interval_field, uuid_field, json_field, jsonb_field, text_array_field, integer_array_field, uuid_array_field, inet_field, cidr_field, macaddr_field, bytea_field, xml_field, nullable_text, nullable_integer, nullable_boolean, nullable_timestamp, nullable_uuid, nullable_jsonb, created_at
	`

	var d DataTypesTest
	err := r.conn.QueryRow(ctx, query, params.TextField, params.VarcharField, params.CharField, params.SmallintField, params.IntegerField, params.BigintField, params.DecimalField, params.NumericField, params.RealField, params.DoubleField, params.BooleanField, params.DateField, params.TimeField, params.TimestampField, params.TimestamptzField, params.IntervalField, params.UuidField, params.JsonField, params.JsonbField, params.TextArrayField, params.IntegerArrayField, params.UuidArrayField, params.InetField, params.CidrField, params.MacaddrField, params.ByteaField, params.XmlField, params.NullableText, params.NullableInteger, params.NullableBoolean, params.NullableTimestamp, params.NullableUuid, params.NullableJsonb, params.CreatedAt, id).Scan(&d.Id, &d.TextField, &d.VarcharField, &d.CharField, &d.SmallintField, &d.IntegerField, &d.BigintField, &d.DecimalField, &d.NumericField, &d.RealField, &d.DoubleField, &d.BooleanField, &d.DateField, &d.TimeField, &d.TimestampField, &d.TimestamptzField, &d.IntervalField, &d.UuidField, &d.JsonField, &d.JsonbField, &d.TextArrayField, &d.IntegerArrayField, &d.UuidArrayField, &d.InetField, &d.CidrField, &d.MacaddrField, &d.ByteaField, &d.XmlField, &d.NullableText, &d.NullableInteger, &d.NullableBoolean, &d.NullableTimestamp, &d.NullableUuid, &d.NullableJsonb, &d.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &d, nil
}

// Delete deletes a DataTypesTest by ID
func (r *DataTypesTestRepository) Delete(ctx context.Context, id uuid.UUID) error {
	query := `
		DELETE FROM data_types_test
		WHERE id = $1
	`

	_, err := r.conn.Exec(ctx, query, id)
	return err
}

// List retrieves all DataTypesTests
func (r *DataTypesTestRepository) List(ctx context.Context) ([]DataTypesTest, error) {
	query := `
		SELECT id, text_field, varchar_field, char_field, smallint_field, integer_field, bigint_field, decimal_field, numeric_field, real_field, double_field, boolean_field, date_field, time_field, timestamp_field, timestamptz_field, interval_field, uuid_field, json_field, jsonb_field, text_array_field, integer_array_field, uuid_array_field, inet_field, cidr_field, macaddr_field, bytea_field, xml_field, nullable_text, nullable_integer, nullable_boolean, nullable_timestamp, nullable_uuid, nullable_jsonb, created_at
		FROM data_types_test
		ORDER BY id ASC
	`

	rows, err := r.conn.Query(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var results []DataTypesTest
	for rows.Next() {
		var d DataTypesTest
		err := rows.Scan(&d.Id, &d.TextField, &d.VarcharField, &d.CharField, &d.SmallintField, &d.IntegerField, &d.BigintField, &d.DecimalField, &d.NumericField, &d.RealField, &d.DoubleField, &d.BooleanField, &d.DateField, &d.TimeField, &d.TimestampField, &d.TimestamptzField, &d.IntervalField, &d.UuidField, &d.JsonField, &d.JsonbField, &d.TextArrayField, &d.IntegerArrayField, &d.UuidArrayField, &d.InetField, &d.CidrField, &d.MacaddrField, &d.ByteaField, &d.XmlField, &d.NullableText, &d.NullableInteger, &d.NullableBoolean, &d.NullableTimestamp, &d.NullableUuid, &d.NullableJsonb, &d.CreatedAt)
		if err != nil {
			return nil, err
		}
		results = append(results, d)
	}

	return results, rows.Err()
}

// ListPaginated retrieves DataTypesTests with cursor-based pagination
func (r *DataTypesTestRepository) ListPaginated(ctx context.Context, params PaginationParams) (*PaginationResult[DataTypesTest], error) {
	// Validate parameters
	if err := validatePaginationParams(params); err != nil {
		return nil, err
	}

	// Set default limit
	limit := params.Limit
	if limit <= 0 {
		limit = 20
	}
	if limit > 100 {
		limit = 100
	}

	// Parse cursor if provided
	var cursor *uuid.UUID
	if params.Cursor != "" {
		cursorUUID, err := decodeCursor(params.Cursor)
		if err != nil {
			return nil, fmt.Errorf("invalid cursor format: %w", err)
		}
		cursor = &cursorUUID
	}

	// Execute query with limit + 1 to check if there are more items
	query := `
		SELECT id, text_field, varchar_field, char_field, smallint_field, integer_field, bigint_field, decimal_field, numeric_field, real_field, double_field, boolean_field, date_field, time_field, timestamp_field, timestamptz_field, interval_field, uuid_field, json_field, jsonb_field, text_array_field, integer_array_field, uuid_array_field, inet_field, cidr_field, macaddr_field, bytea_field, xml_field, nullable_text, nullable_integer, nullable_boolean, nullable_timestamp, nullable_uuid, nullable_jsonb, created_at
		FROM data_types_test
		WHERE ($1::uuid IS NULL OR id > $1)
		ORDER BY id ASC
		LIMIT $2
	`

	rows, err := r.conn.Query(ctx, query, cursor, int32(limit+1))
	if err != nil {
		return nil, fmt.Errorf("pagination query failed: %w", err)
	}
	defer rows.Close()

	var items []DataTypesTest
	for rows.Next() {
		var d DataTypesTest
		err := rows.Scan(&d.Id, &d.TextField, &d.VarcharField, &d.CharField, &d.SmallintField, &d.IntegerField, &d.BigintField, &d.DecimalField, &d.NumericField, &d.RealField, &d.DoubleField, &d.BooleanField, &d.DateField, &d.TimeField, &d.TimestampField, &d.TimestamptzField, &d.IntervalField, &d.UuidField, &d.JsonField, &d.JsonbField, &d.TextArrayField, &d.IntegerArrayField, &d.UuidArrayField, &d.InetField, &d.CidrField, &d.MacaddrField, &d.ByteaField, &d.XmlField, &d.NullableText, &d.NullableInteger, &d.NullableBoolean, &d.NullableTimestamp, &d.NullableUuid, &d.NullableJsonb, &d.CreatedAt)
		if err != nil {
			return nil, err
		}
		items = append(items, d)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}

	// Check if there are more items
	hasMore := len(items) > limit
	if hasMore {
		items = items[:limit] // Remove the extra item
	}

	// Generate next cursor if there are more items
	var nextCursor string
	if hasMore && len(items) > 0 {
		lastItem := items[len(items)-1]
		nextCursor = encodeCursor(lastItem.GetID())
	}

	return &PaginationResult[DataTypesTest]{
		Items:      items,
		HasMore:    hasMore,
		NextCursor: nextCursor,
	}, nil
}
