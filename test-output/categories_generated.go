// Code generated by dbutil-gen. DO NOT EDIT.
// Source: table categories

package repositories

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxpool"
)

// Categories represents a row from the categories table
type Categories struct {
	Id          uuid.UUID          `json:"id" db:"id"`
	Name        string             `json:"name" db:"name"`
	Description pgtype.Text        `json:"description" db:"description"`
	Slug        string             `json:"slug" db:"slug"`
	ParentId    pgtype.UUID        `json:"parent_id" db:"parent_id"`
	SortOrder   pgtype.Int4        `json:"sort_order" db:"sort_order"`
	IsActive    pgtype.Bool        `json:"is_active" db:"is_active"`
	CreatedAt   pgtype.Timestamptz `json:"created_at" db:"created_at"`
}

// GetID returns the ID of the Categories for pagination
func (c Categories) GetID() uuid.UUID {
	return c.Id
}

// CategoriesRepository provides database operations for categories
type CategoriesRepository struct {
	conn *pgxpool.Pool
}

// NewCategoriesRepository creates a new CategoriesRepository
func NewCategoriesRepository(conn *pgxpool.Pool) *CategoriesRepository {
	return &CategoriesRepository{
		conn: conn,
	}
}

// GetByID retrieves a Categories by its ID
func (r *CategoriesRepository) GetByID(ctx context.Context, id uuid.UUID) (*Categories, error) {
	query := `
		SELECT id, name, description, slug, parent_id, sort_order, is_active, created_at
		FROM categories
		WHERE id = $1
	`

	var c Categories
	err := r.conn.QueryRow(ctx, query, id).Scan(&c.Id, &c.Name, &c.Description, &c.Slug, &c.ParentId, &c.SortOrder, &c.IsActive, &c.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// CreateCategoriesParams holds parameters for creating a Categories
type CreateCategoriesParams struct {
	Name        string      `json:"name" db:"name"`
	Description pgtype.Text `json:"description" db:"description"`
	Slug        string      `json:"slug" db:"slug"`
	ParentId    pgtype.UUID `json:"parent_id" db:"parent_id"`
}

// Create creates a new Categories
func (r *CategoriesRepository) Create(ctx context.Context, params CreateCategoriesParams) (*Categories, error) {
	query := `
		INSERT INTO categories (name, description, slug, parent_id)
		VALUES ($1, $2, $3, $4)
		RETURNING id, name, description, slug, parent_id, sort_order, is_active, created_at
	`

	var c Categories
	err := r.conn.QueryRow(ctx, query, params.Name, params.Description, params.Slug, params.ParentId).Scan(&c.Id, &c.Name, &c.Description, &c.Slug, &c.ParentId, &c.SortOrder, &c.IsActive, &c.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// UpdateCategoriesParams holds parameters for updating a Categories
type UpdateCategoriesParams struct {
	Name        string             `json:"name" db:"name"`
	Description pgtype.Text        `json:"description" db:"description"`
	Slug        string             `json:"slug" db:"slug"`
	ParentId    pgtype.UUID        `json:"parent_id" db:"parent_id"`
	SortOrder   pgtype.Int4        `json:"sort_order" db:"sort_order"`
	IsActive    pgtype.Bool        `json:"is_active" db:"is_active"`
	CreatedAt   pgtype.Timestamptz `json:"created_at" db:"created_at"`
}

// Update updates a Categories by ID
func (r *CategoriesRepository) Update(ctx context.Context, id uuid.UUID, params UpdateCategoriesParams) (*Categories, error) {
	query := `
		UPDATE categories
		SET name = $1, description = $2, slug = $3, parent_id = $4, sort_order = $5, is_active = $6, created_at = $7
		WHERE id = $8
		RETURNING id, name, description, slug, parent_id, sort_order, is_active, created_at
	`

	var c Categories
	err := r.conn.QueryRow(ctx, query, params.Name, params.Description, params.Slug, params.ParentId, params.SortOrder, params.IsActive, params.CreatedAt, id).Scan(&c.Id, &c.Name, &c.Description, &c.Slug, &c.ParentId, &c.SortOrder, &c.IsActive, &c.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// Delete deletes a Categories by ID
func (r *CategoriesRepository) Delete(ctx context.Context, id uuid.UUID) error {
	query := `
		DELETE FROM categories
		WHERE id = $1
	`

	_, err := r.conn.Exec(ctx, query, id)
	return err
}

// List retrieves all Categoriess
func (r *CategoriesRepository) List(ctx context.Context) ([]Categories, error) {
	query := `
		SELECT id, name, description, slug, parent_id, sort_order, is_active, created_at
		FROM categories
		ORDER BY id ASC
	`

	rows, err := r.conn.Query(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var results []Categories
	for rows.Next() {
		var c Categories
		err := rows.Scan(&c.Id, &c.Name, &c.Description, &c.Slug, &c.ParentId, &c.SortOrder, &c.IsActive, &c.CreatedAt)
		if err != nil {
			return nil, err
		}
		results = append(results, c)
	}

	return results, rows.Err()
}

// ListPaginated retrieves Categoriess with cursor-based pagination
func (r *CategoriesRepository) ListPaginated(ctx context.Context, params PaginationParams) (*PaginationResult[Categories], error) {
	// Validate parameters
	if err := validatePaginationParams(params); err != nil {
		return nil, err
	}

	// Set default limit
	limit := params.Limit
	if limit <= 0 {
		limit = 20
	}
	if limit > 100 {
		limit = 100
	}

	// Parse cursor if provided
	var cursor *uuid.UUID
	if params.Cursor != "" {
		cursorUUID, err := decodeCursor(params.Cursor)
		if err != nil {
			return nil, fmt.Errorf("invalid cursor format: %w", err)
		}
		cursor = &cursorUUID
	}

	// Execute query with limit + 1 to check if there are more items
	query := `
		SELECT id, name, description, slug, parent_id, sort_order, is_active, created_at
		FROM categories
		WHERE ($1::uuid IS NULL OR id > $1)
		ORDER BY id ASC
		LIMIT $2
	`

	rows, err := r.conn.Query(ctx, query, cursor, int32(limit+1))
	if err != nil {
		return nil, fmt.Errorf("pagination query failed: %w", err)
	}
	defer rows.Close()

	var items []Categories
	for rows.Next() {
		var c Categories
		err := rows.Scan(&c.Id, &c.Name, &c.Description, &c.Slug, &c.ParentId, &c.SortOrder, &c.IsActive, &c.CreatedAt)
		if err != nil {
			return nil, err
		}
		items = append(items, c)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}

	// Check if there are more items
	hasMore := len(items) > limit
	if hasMore {
		items = items[:limit] // Remove the extra item
	}

	// Generate next cursor if there are more items
	var nextCursor string
	if hasMore && len(items) > 0 {
		lastItem := items[len(items)-1]
		nextCursor = encodeCursor(lastItem.GetID())
	}

	return &PaginationResult[Categories]{
		Items:      items,
		HasMore:    hasMore,
		NextCursor: nextCursor,
	}, nil
}
