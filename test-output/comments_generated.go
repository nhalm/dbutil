// Code generated by dbutil-gen. DO NOT EDIT.
// Source: table comments

package repositories

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxpool"
)

// Comments represents a row from the comments table
type Comments struct {
	Id         uuid.UUID          `json:"id" db:"id"`
	PostId     uuid.UUID          `json:"post_id" db:"post_id"`
	UserId     uuid.UUID          `json:"user_id" db:"user_id"`
	ParentId   pgtype.UUID        `json:"parent_id" db:"parent_id"`
	Content    string             `json:"content" db:"content"`
	IsApproved pgtype.Bool        `json:"is_approved" db:"is_approved"`
	Upvotes    pgtype.Int4        `json:"upvotes" db:"upvotes"`
	Downvotes  pgtype.Int4        `json:"downvotes" db:"downvotes"`
	CreatedAt  pgtype.Timestamptz `json:"created_at" db:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at" db:"updated_at"`
}

// GetID returns the ID of the Comments for pagination
func (c Comments) GetID() uuid.UUID {
	return c.Id
}

// CommentsRepository provides database operations for comments
type CommentsRepository struct {
	conn *pgxpool.Pool
}

// NewCommentsRepository creates a new CommentsRepository
func NewCommentsRepository(conn *pgxpool.Pool) *CommentsRepository {
	return &CommentsRepository{
		conn: conn,
	}
}

// GetByID retrieves a Comments by its ID
func (r *CommentsRepository) GetByID(ctx context.Context, id uuid.UUID) (*Comments, error) {
	query := `
		SELECT id, post_id, user_id, parent_id, content, is_approved, upvotes, downvotes, created_at, updated_at
		FROM comments
		WHERE id = $1
	`

	var c Comments
	err := r.conn.QueryRow(ctx, query, id).Scan(&c.Id, &c.PostId, &c.UserId, &c.ParentId, &c.Content, &c.IsApproved, &c.Upvotes, &c.Downvotes, &c.CreatedAt, &c.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// CreateCommentsParams holds parameters for creating a Comments
type CreateCommentsParams struct {
	PostId   uuid.UUID   `json:"post_id" db:"post_id"`
	UserId   uuid.UUID   `json:"user_id" db:"user_id"`
	ParentId pgtype.UUID `json:"parent_id" db:"parent_id"`
	Content  string      `json:"content" db:"content"`
}

// Create creates a new Comments
func (r *CommentsRepository) Create(ctx context.Context, params CreateCommentsParams) (*Comments, error) {
	query := `
		INSERT INTO comments (post_id, user_id, parent_id, content)
		VALUES ($1, $2, $3, $4)
		RETURNING id, post_id, user_id, parent_id, content, is_approved, upvotes, downvotes, created_at, updated_at
	`

	var c Comments
	err := r.conn.QueryRow(ctx, query, params.PostId, params.UserId, params.ParentId, params.Content).Scan(&c.Id, &c.PostId, &c.UserId, &c.ParentId, &c.Content, &c.IsApproved, &c.Upvotes, &c.Downvotes, &c.CreatedAt, &c.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// UpdateCommentsParams holds parameters for updating a Comments
type UpdateCommentsParams struct {
	PostId     uuid.UUID          `json:"post_id" db:"post_id"`
	UserId     uuid.UUID          `json:"user_id" db:"user_id"`
	ParentId   pgtype.UUID        `json:"parent_id" db:"parent_id"`
	Content    string             `json:"content" db:"content"`
	IsApproved pgtype.Bool        `json:"is_approved" db:"is_approved"`
	Upvotes    pgtype.Int4        `json:"upvotes" db:"upvotes"`
	Downvotes  pgtype.Int4        `json:"downvotes" db:"downvotes"`
	CreatedAt  pgtype.Timestamptz `json:"created_at" db:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at" db:"updated_at"`
}

// Update updates a Comments by ID
func (r *CommentsRepository) Update(ctx context.Context, id uuid.UUID, params UpdateCommentsParams) (*Comments, error) {
	query := `
		UPDATE comments
		SET post_id = $1, user_id = $2, parent_id = $3, content = $4, is_approved = $5, upvotes = $6, downvotes = $7, created_at = $8, updated_at = $9
		WHERE id = $10
		RETURNING id, post_id, user_id, parent_id, content, is_approved, upvotes, downvotes, created_at, updated_at
	`

	var c Comments
	err := r.conn.QueryRow(ctx, query, params.PostId, params.UserId, params.ParentId, params.Content, params.IsApproved, params.Upvotes, params.Downvotes, params.CreatedAt, params.UpdatedAt, id).Scan(&c.Id, &c.PostId, &c.UserId, &c.ParentId, &c.Content, &c.IsApproved, &c.Upvotes, &c.Downvotes, &c.CreatedAt, &c.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// Delete deletes a Comments by ID
func (r *CommentsRepository) Delete(ctx context.Context, id uuid.UUID) error {
	query := `
		DELETE FROM comments
		WHERE id = $1
	`

	_, err := r.conn.Exec(ctx, query, id)
	return err
}

// List retrieves all Commentss
func (r *CommentsRepository) List(ctx context.Context) ([]Comments, error) {
	query := `
		SELECT id, post_id, user_id, parent_id, content, is_approved, upvotes, downvotes, created_at, updated_at
		FROM comments
		ORDER BY id ASC
	`

	rows, err := r.conn.Query(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var results []Comments
	for rows.Next() {
		var c Comments
		err := rows.Scan(&c.Id, &c.PostId, &c.UserId, &c.ParentId, &c.Content, &c.IsApproved, &c.Upvotes, &c.Downvotes, &c.CreatedAt, &c.UpdatedAt)
		if err != nil {
			return nil, err
		}
		results = append(results, c)
	}

	return results, rows.Err()
}

// ListPaginated retrieves Commentss with cursor-based pagination
func (r *CommentsRepository) ListPaginated(ctx context.Context, params PaginationParams) (*PaginationResult[Comments], error) {
	// Validate parameters
	if err := validatePaginationParams(params); err != nil {
		return nil, err
	}

	// Set default limit
	limit := params.Limit
	if limit <= 0 {
		limit = 20
	}
	if limit > 100 {
		limit = 100
	}

	// Parse cursor if provided
	var cursor *uuid.UUID
	if params.Cursor != "" {
		cursorUUID, err := decodeCursor(params.Cursor)
		if err != nil {
			return nil, fmt.Errorf("invalid cursor format: %w", err)
		}
		cursor = &cursorUUID
	}

	// Execute query with limit + 1 to check if there are more items
	query := `
		SELECT id, post_id, user_id, parent_id, content, is_approved, upvotes, downvotes, created_at, updated_at
		FROM comments
		WHERE ($1::uuid IS NULL OR id > $1)
		ORDER BY id ASC
		LIMIT $2
	`

	rows, err := r.conn.Query(ctx, query, cursor, int32(limit+1))
	if err != nil {
		return nil, fmt.Errorf("pagination query failed: %w", err)
	}
	defer rows.Close()

	var items []Comments
	for rows.Next() {
		var c Comments
		err := rows.Scan(&c.Id, &c.PostId, &c.UserId, &c.ParentId, &c.Content, &c.IsApproved, &c.Upvotes, &c.Downvotes, &c.CreatedAt, &c.UpdatedAt)
		if err != nil {
			return nil, err
		}
		items = append(items, c)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}

	// Check if there are more items
	hasMore := len(items) > limit
	if hasMore {
		items = items[:limit] // Remove the extra item
	}

	// Generate next cursor if there are more items
	var nextCursor string
	if hasMore && len(items) > 0 {
		lastItem := items[len(items)-1]
		nextCursor = encodeCursor(lastItem.GetID())
	}

	return &PaginationResult[Comments]{
		Items:      items,
		HasMore:    hasMore,
		NextCursor: nextCursor,
	}, nil
}
