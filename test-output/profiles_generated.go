// Code generated by dbutil-gen. DO NOT EDIT.
// Source: table profiles

package repositories

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxpool"
)

// Profiles represents a row from the profiles table
type Profiles struct {
	Id          uuid.UUID          `json:"id" db:"id"`
	UserId      uuid.UUID          `json:"user_id" db:"user_id"`
	Bio         pgtype.Text        `json:"bio" db:"bio"`
	AvatarUrl   pgtype.Text        `json:"avatar_url" db:"avatar_url"`
	WebsiteUrl  pgtype.Text        `json:"website_url" db:"website_url"`
	Location    pgtype.Text        `json:"location" db:"location"`
	BirthDate   pgtype.Timestamptz `json:"birth_date" db:"birth_date"`
	Phone       pgtype.Text        `json:"phone" db:"phone"`
	Preferences pgtype.JSON        `json:"preferences" db:"preferences"`
	CreatedAt   pgtype.Timestamptz `json:"created_at" db:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at" db:"updated_at"`
}

// GetID returns the ID of the Profiles for pagination
func (p Profiles) GetID() uuid.UUID {
	return p.Id
}

// ProfilesRepository provides database operations for profiles
type ProfilesRepository struct {
	conn *pgxpool.Pool
}

// NewProfilesRepository creates a new ProfilesRepository
func NewProfilesRepository(conn *pgxpool.Pool) *ProfilesRepository {
	return &ProfilesRepository{
		conn: conn,
	}
}

// GetByID retrieves a Profiles by its ID
func (r *ProfilesRepository) GetByID(ctx context.Context, id uuid.UUID) (*Profiles, error) {
	query := `
		SELECT id, user_id, bio, avatar_url, website_url, location, birth_date, phone, preferences, created_at, updated_at
		FROM profiles
		WHERE id = $1
	`

	var p Profiles
	err := r.conn.QueryRow(ctx, query, id).Scan(&p.Id, &p.UserId, &p.Bio, &p.AvatarUrl, &p.WebsiteUrl, &p.Location, &p.BirthDate, &p.Phone, &p.Preferences, &p.CreatedAt, &p.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// CreateProfilesParams holds parameters for creating a Profiles
type CreateProfilesParams struct {
	UserId     uuid.UUID          `json:"user_id" db:"user_id"`
	Bio        pgtype.Text        `json:"bio" db:"bio"`
	AvatarUrl  pgtype.Text        `json:"avatar_url" db:"avatar_url"`
	WebsiteUrl pgtype.Text        `json:"website_url" db:"website_url"`
	Location   pgtype.Text        `json:"location" db:"location"`
	BirthDate  pgtype.Timestamptz `json:"birth_date" db:"birth_date"`
	Phone      pgtype.Text        `json:"phone" db:"phone"`
}

// Create creates a new Profiles
func (r *ProfilesRepository) Create(ctx context.Context, params CreateProfilesParams) (*Profiles, error) {
	query := `
		INSERT INTO profiles (user_id, bio, avatar_url, website_url, location, birth_date, phone)
		VALUES ($1, $2, $3, $4, $5, $6, $7)
		RETURNING id, user_id, bio, avatar_url, website_url, location, birth_date, phone, preferences, created_at, updated_at
	`

	var p Profiles
	err := r.conn.QueryRow(ctx, query, params.UserId, params.Bio, params.AvatarUrl, params.WebsiteUrl, params.Location, params.BirthDate, params.Phone).Scan(&p.Id, &p.UserId, &p.Bio, &p.AvatarUrl, &p.WebsiteUrl, &p.Location, &p.BirthDate, &p.Phone, &p.Preferences, &p.CreatedAt, &p.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// UpdateProfilesParams holds parameters for updating a Profiles
type UpdateProfilesParams struct {
	UserId      uuid.UUID          `json:"user_id" db:"user_id"`
	Bio         pgtype.Text        `json:"bio" db:"bio"`
	AvatarUrl   pgtype.Text        `json:"avatar_url" db:"avatar_url"`
	WebsiteUrl  pgtype.Text        `json:"website_url" db:"website_url"`
	Location    pgtype.Text        `json:"location" db:"location"`
	BirthDate   pgtype.Timestamptz `json:"birth_date" db:"birth_date"`
	Phone       pgtype.Text        `json:"phone" db:"phone"`
	Preferences pgtype.JSON        `json:"preferences" db:"preferences"`
	CreatedAt   pgtype.Timestamptz `json:"created_at" db:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at" db:"updated_at"`
}

// Update updates a Profiles by ID
func (r *ProfilesRepository) Update(ctx context.Context, id uuid.UUID, params UpdateProfilesParams) (*Profiles, error) {
	query := `
		UPDATE profiles
		SET user_id = $1, bio = $2, avatar_url = $3, website_url = $4, location = $5, birth_date = $6, phone = $7, preferences = $8, created_at = $9, updated_at = $10
		WHERE id = $11
		RETURNING id, user_id, bio, avatar_url, website_url, location, birth_date, phone, preferences, created_at, updated_at
	`

	var p Profiles
	err := r.conn.QueryRow(ctx, query, params.UserId, params.Bio, params.AvatarUrl, params.WebsiteUrl, params.Location, params.BirthDate, params.Phone, params.Preferences, params.CreatedAt, params.UpdatedAt, id).Scan(&p.Id, &p.UserId, &p.Bio, &p.AvatarUrl, &p.WebsiteUrl, &p.Location, &p.BirthDate, &p.Phone, &p.Preferences, &p.CreatedAt, &p.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// Delete deletes a Profiles by ID
func (r *ProfilesRepository) Delete(ctx context.Context, id uuid.UUID) error {
	query := `
		DELETE FROM profiles
		WHERE id = $1
	`

	_, err := r.conn.Exec(ctx, query, id)
	return err
}

// List retrieves all Profiless
func (r *ProfilesRepository) List(ctx context.Context) ([]Profiles, error) {
	query := `
		SELECT id, user_id, bio, avatar_url, website_url, location, birth_date, phone, preferences, created_at, updated_at
		FROM profiles
		ORDER BY id ASC
	`

	rows, err := r.conn.Query(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var results []Profiles
	for rows.Next() {
		var p Profiles
		err := rows.Scan(&p.Id, &p.UserId, &p.Bio, &p.AvatarUrl, &p.WebsiteUrl, &p.Location, &p.BirthDate, &p.Phone, &p.Preferences, &p.CreatedAt, &p.UpdatedAt)
		if err != nil {
			return nil, err
		}
		results = append(results, p)
	}

	return results, rows.Err()
}

// ListPaginated retrieves Profiless with cursor-based pagination
func (r *ProfilesRepository) ListPaginated(ctx context.Context, params PaginationParams) (*PaginationResult[Profiles], error) {
	// Validate parameters
	if err := validatePaginationParams(params); err != nil {
		return nil, err
	}

	// Set default limit
	limit := params.Limit
	if limit <= 0 {
		limit = 20
	}
	if limit > 100 {
		limit = 100
	}

	// Parse cursor if provided
	var cursor *uuid.UUID
	if params.Cursor != "" {
		cursorUUID, err := decodeCursor(params.Cursor)
		if err != nil {
			return nil, fmt.Errorf("invalid cursor format: %w", err)
		}
		cursor = &cursorUUID
	}

	// Execute query with limit + 1 to check if there are more items
	query := `
		SELECT id, user_id, bio, avatar_url, website_url, location, birth_date, phone, preferences, created_at, updated_at
		FROM profiles
		WHERE ($1::uuid IS NULL OR id > $1)
		ORDER BY id ASC
		LIMIT $2
	`

	rows, err := r.conn.Query(ctx, query, cursor, int32(limit+1))
	if err != nil {
		return nil, fmt.Errorf("pagination query failed: %w", err)
	}
	defer rows.Close()

	var items []Profiles
	for rows.Next() {
		var p Profiles
		err := rows.Scan(&p.Id, &p.UserId, &p.Bio, &p.AvatarUrl, &p.WebsiteUrl, &p.Location, &p.BirthDate, &p.Phone, &p.Preferences, &p.CreatedAt, &p.UpdatedAt)
		if err != nil {
			return nil, err
		}
		items = append(items, p)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}

	// Check if there are more items
	hasMore := len(items) > limit
	if hasMore {
		items = items[:limit] // Remove the extra item
	}

	// Generate next cursor if there are more items
	var nextCursor string
	if hasMore && len(items) > 0 {
		lastItem := items[len(items)-1]
		nextCursor = encodeCursor(lastItem.GetID())
	}

	return &PaginationResult[Profiles]{
		Items:      items,
		HasMore:    hasMore,
		NextCursor: nextCursor,
	}, nil
}
