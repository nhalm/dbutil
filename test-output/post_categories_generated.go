// Code generated by dbutil-gen. DO NOT EDIT.
// Source: table post_categories

package repositories

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostCategories represents a row from the post_categories table
type PostCategories struct {
	Id         uuid.UUID          `json:"id" db:"id"`
	PostId     uuid.UUID          `json:"post_id" db:"post_id"`
	CategoryId uuid.UUID          `json:"category_id" db:"category_id"`
	CreatedAt  pgtype.Timestamptz `json:"created_at" db:"created_at"`
}

// GetID returns the ID of the PostCategories for pagination
func (p PostCategories) GetID() uuid.UUID {
	return p.Id
}

// PostCategoriesRepository provides database operations for post_categories
type PostCategoriesRepository struct {
	conn *pgxpool.Pool
}

// NewPostCategoriesRepository creates a new PostCategoriesRepository
func NewPostCategoriesRepository(conn *pgxpool.Pool) *PostCategoriesRepository {
	return &PostCategoriesRepository{
		conn: conn,
	}
}

// GetByID retrieves a PostCategories by its ID
func (r *PostCategoriesRepository) GetByID(ctx context.Context, id uuid.UUID) (*PostCategories, error) {
	query := `
		SELECT id, post_id, category_id, created_at
		FROM post_categories
		WHERE id = $1
	`

	var p PostCategories
	err := r.conn.QueryRow(ctx, query, id).Scan(&p.Id, &p.PostId, &p.CategoryId, &p.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// CreatePostCategoriesParams holds parameters for creating a PostCategories
type CreatePostCategoriesParams struct {
	PostId     uuid.UUID `json:"post_id" db:"post_id"`
	CategoryId uuid.UUID `json:"category_id" db:"category_id"`
}

// Create creates a new PostCategories
func (r *PostCategoriesRepository) Create(ctx context.Context, params CreatePostCategoriesParams) (*PostCategories, error) {
	query := `
		INSERT INTO post_categories (post_id, category_id)
		VALUES ($1, $2)
		RETURNING id, post_id, category_id, created_at
	`

	var p PostCategories
	err := r.conn.QueryRow(ctx, query, params.PostId, params.CategoryId).Scan(&p.Id, &p.PostId, &p.CategoryId, &p.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// UpdatePostCategoriesParams holds parameters for updating a PostCategories
type UpdatePostCategoriesParams struct {
	PostId     uuid.UUID          `json:"post_id" db:"post_id"`
	CategoryId uuid.UUID          `json:"category_id" db:"category_id"`
	CreatedAt  pgtype.Timestamptz `json:"created_at" db:"created_at"`
}

// Update updates a PostCategories by ID
func (r *PostCategoriesRepository) Update(ctx context.Context, id uuid.UUID, params UpdatePostCategoriesParams) (*PostCategories, error) {
	query := `
		UPDATE post_categories
		SET post_id = $1, category_id = $2, created_at = $3
		WHERE id = $4
		RETURNING id, post_id, category_id, created_at
	`

	var p PostCategories
	err := r.conn.QueryRow(ctx, query, params.PostId, params.CategoryId, params.CreatedAt, id).Scan(&p.Id, &p.PostId, &p.CategoryId, &p.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// Delete deletes a PostCategories by ID
func (r *PostCategoriesRepository) Delete(ctx context.Context, id uuid.UUID) error {
	query := `
		DELETE FROM post_categories
		WHERE id = $1
	`

	_, err := r.conn.Exec(ctx, query, id)
	return err
}

// List retrieves all PostCategoriess
func (r *PostCategoriesRepository) List(ctx context.Context) ([]PostCategories, error) {
	query := `
		SELECT id, post_id, category_id, created_at
		FROM post_categories
		ORDER BY id ASC
	`

	rows, err := r.conn.Query(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var results []PostCategories
	for rows.Next() {
		var p PostCategories
		err := rows.Scan(&p.Id, &p.PostId, &p.CategoryId, &p.CreatedAt)
		if err != nil {
			return nil, err
		}
		results = append(results, p)
	}

	return results, rows.Err()
}

// ListPaginated retrieves PostCategoriess with cursor-based pagination
func (r *PostCategoriesRepository) ListPaginated(ctx context.Context, params PaginationParams) (*PaginationResult[PostCategories], error) {
	// Validate parameters
	if err := validatePaginationParams(params); err != nil {
		return nil, err
	}

	// Set default limit
	limit := params.Limit
	if limit <= 0 {
		limit = 20
	}
	if limit > 100 {
		limit = 100
	}

	// Parse cursor if provided
	var cursor *uuid.UUID
	if params.Cursor != "" {
		cursorUUID, err := decodeCursor(params.Cursor)
		if err != nil {
			return nil, fmt.Errorf("invalid cursor format: %w", err)
		}
		cursor = &cursorUUID
	}

	// Execute query with limit + 1 to check if there are more items
	query := `
		SELECT id, post_id, category_id, created_at
		FROM post_categories
		WHERE ($1::uuid IS NULL OR id > $1)
		ORDER BY id ASC
		LIMIT $2
	`

	rows, err := r.conn.Query(ctx, query, cursor, int32(limit+1))
	if err != nil {
		return nil, fmt.Errorf("pagination query failed: %w", err)
	}
	defer rows.Close()

	var items []PostCategories
	for rows.Next() {
		var p PostCategories
		err := rows.Scan(&p.Id, &p.PostId, &p.CategoryId, &p.CreatedAt)
		if err != nil {
			return nil, err
		}
		items = append(items, p)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}

	// Check if there are more items
	hasMore := len(items) > limit
	if hasMore {
		items = items[:limit] // Remove the extra item
	}

	// Generate next cursor if there are more items
	var nextCursor string
	if hasMore && len(items) > 0 {
		lastItem := items[len(items)-1]
		nextCursor = encodeCursor(lastItem.GetID())
	}

	return &PaginationResult[PostCategories]{
		Items:      items,
		HasMore:    hasMore,
		NextCursor: nextCursor,
	}, nil
}
