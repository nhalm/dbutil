// Code generated by dbutil-gen. DO NOT EDIT.
// Source: table posts

package repositories

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxpool"
)

// Posts represents a row from the posts table
type Posts struct {
	Id               uuid.UUID          `json:"id" db:"id"`
	UserId           uuid.UUID          `json:"user_id" db:"user_id"`
	Title            string             `json:"title" db:"title"`
	Content          string             `json:"content" db:"content"`
	Excerpt          pgtype.Text        `json:"excerpt" db:"excerpt"`
	Slug             string             `json:"slug" db:"slug"`
	Status           pgtype.Text        `json:"status" db:"status"`
	PublishedAt      pgtype.Timestamptz `json:"published_at" db:"published_at"`
	ViewCount        pgtype.Int4        `json:"view_count" db:"view_count"`
	LikeCount        pgtype.Int4        `json:"like_count" db:"like_count"`
	Tags             []pgtype.Text      `json:"tags" db:"tags"`
	FeaturedImageUrl pgtype.Text        `json:"featured_image_url" db:"featured_image_url"`
	SeoData          pgtype.JSON        `json:"seo_data" db:"seo_data"`
	CreatedAt        pgtype.Timestamptz `json:"created_at" db:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at" db:"updated_at"`
}

// GetID returns the ID of the Posts for pagination
func (p Posts) GetID() uuid.UUID {
	return p.Id
}

// PostsRepository provides database operations for posts
type PostsRepository struct {
	conn *pgxpool.Pool
}

// NewPostsRepository creates a new PostsRepository
func NewPostsRepository(conn *pgxpool.Pool) *PostsRepository {
	return &PostsRepository{
		conn: conn,
	}
}

// GetByID retrieves a Posts by its ID
func (r *PostsRepository) GetByID(ctx context.Context, id uuid.UUID) (*Posts, error) {
	query := `
		SELECT id, user_id, title, content, excerpt, slug, status, published_at, view_count, like_count, tags, featured_image_url, seo_data, created_at, updated_at
		FROM posts
		WHERE id = $1
	`

	var p Posts
	err := r.conn.QueryRow(ctx, query, id).Scan(&p.Id, &p.UserId, &p.Title, &p.Content, &p.Excerpt, &p.Slug, &p.Status, &p.PublishedAt, &p.ViewCount, &p.LikeCount, &p.Tags, &p.FeaturedImageUrl, &p.SeoData, &p.CreatedAt, &p.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// CreatePostsParams holds parameters for creating a Posts
type CreatePostsParams struct {
	UserId           uuid.UUID          `json:"user_id" db:"user_id"`
	Title            string             `json:"title" db:"title"`
	Content          string             `json:"content" db:"content"`
	Excerpt          pgtype.Text        `json:"excerpt" db:"excerpt"`
	Slug             string             `json:"slug" db:"slug"`
	PublishedAt      pgtype.Timestamptz `json:"published_at" db:"published_at"`
	FeaturedImageUrl pgtype.Text        `json:"featured_image_url" db:"featured_image_url"`
	SeoData          pgtype.JSON        `json:"seo_data" db:"seo_data"`
}

// Create creates a new Posts
func (r *PostsRepository) Create(ctx context.Context, params CreatePostsParams) (*Posts, error) {
	query := `
		INSERT INTO posts (user_id, title, content, excerpt, slug, published_at, featured_image_url, seo_data)
		VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
		RETURNING id, user_id, title, content, excerpt, slug, status, published_at, view_count, like_count, tags, featured_image_url, seo_data, created_at, updated_at
	`

	var p Posts
	err := r.conn.QueryRow(ctx, query, params.UserId, params.Title, params.Content, params.Excerpt, params.Slug, params.PublishedAt, params.FeaturedImageUrl, params.SeoData).Scan(&p.Id, &p.UserId, &p.Title, &p.Content, &p.Excerpt, &p.Slug, &p.Status, &p.PublishedAt, &p.ViewCount, &p.LikeCount, &p.Tags, &p.FeaturedImageUrl, &p.SeoData, &p.CreatedAt, &p.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// UpdatePostsParams holds parameters for updating a Posts
type UpdatePostsParams struct {
	UserId           uuid.UUID          `json:"user_id" db:"user_id"`
	Title            string             `json:"title" db:"title"`
	Content          string             `json:"content" db:"content"`
	Excerpt          pgtype.Text        `json:"excerpt" db:"excerpt"`
	Slug             string             `json:"slug" db:"slug"`
	Status           pgtype.Text        `json:"status" db:"status"`
	PublishedAt      pgtype.Timestamptz `json:"published_at" db:"published_at"`
	ViewCount        pgtype.Int4        `json:"view_count" db:"view_count"`
	LikeCount        pgtype.Int4        `json:"like_count" db:"like_count"`
	Tags             []pgtype.Text      `json:"tags" db:"tags"`
	FeaturedImageUrl pgtype.Text        `json:"featured_image_url" db:"featured_image_url"`
	SeoData          pgtype.JSON        `json:"seo_data" db:"seo_data"`
	CreatedAt        pgtype.Timestamptz `json:"created_at" db:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at" db:"updated_at"`
}

// Update updates a Posts by ID
func (r *PostsRepository) Update(ctx context.Context, id uuid.UUID, params UpdatePostsParams) (*Posts, error) {
	query := `
		UPDATE posts
		SET user_id = $1, title = $2, content = $3, excerpt = $4, slug = $5, status = $6, published_at = $7, view_count = $8, like_count = $9, tags = $10, featured_image_url = $11, seo_data = $12, created_at = $13, updated_at = $14
		WHERE id = $15
		RETURNING id, user_id, title, content, excerpt, slug, status, published_at, view_count, like_count, tags, featured_image_url, seo_data, created_at, updated_at
	`

	var p Posts
	err := r.conn.QueryRow(ctx, query, params.UserId, params.Title, params.Content, params.Excerpt, params.Slug, params.Status, params.PublishedAt, params.ViewCount, params.LikeCount, params.Tags, params.FeaturedImageUrl, params.SeoData, params.CreatedAt, params.UpdatedAt, id).Scan(&p.Id, &p.UserId, &p.Title, &p.Content, &p.Excerpt, &p.Slug, &p.Status, &p.PublishedAt, &p.ViewCount, &p.LikeCount, &p.Tags, &p.FeaturedImageUrl, &p.SeoData, &p.CreatedAt, &p.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// Delete deletes a Posts by ID
func (r *PostsRepository) Delete(ctx context.Context, id uuid.UUID) error {
	query := `
		DELETE FROM posts
		WHERE id = $1
	`

	_, err := r.conn.Exec(ctx, query, id)
	return err
}

// List retrieves all Postss
func (r *PostsRepository) List(ctx context.Context) ([]Posts, error) {
	query := `
		SELECT id, user_id, title, content, excerpt, slug, status, published_at, view_count, like_count, tags, featured_image_url, seo_data, created_at, updated_at
		FROM posts
		ORDER BY id ASC
	`

	rows, err := r.conn.Query(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var results []Posts
	for rows.Next() {
		var p Posts
		err := rows.Scan(&p.Id, &p.UserId, &p.Title, &p.Content, &p.Excerpt, &p.Slug, &p.Status, &p.PublishedAt, &p.ViewCount, &p.LikeCount, &p.Tags, &p.FeaturedImageUrl, &p.SeoData, &p.CreatedAt, &p.UpdatedAt)
		if err != nil {
			return nil, err
		}
		results = append(results, p)
	}

	return results, rows.Err()
}

// ListPaginated retrieves Postss with cursor-based pagination
func (r *PostsRepository) ListPaginated(ctx context.Context, params PaginationParams) (*PaginationResult[Posts], error) {
	// Validate parameters
	if err := validatePaginationParams(params); err != nil {
		return nil, err
	}

	// Set default limit
	limit := params.Limit
	if limit <= 0 {
		limit = 20
	}
	if limit > 100 {
		limit = 100
	}

	// Parse cursor if provided
	var cursor *uuid.UUID
	if params.Cursor != "" {
		cursorUUID, err := decodeCursor(params.Cursor)
		if err != nil {
			return nil, fmt.Errorf("invalid cursor format: %w", err)
		}
		cursor = &cursorUUID
	}

	// Execute query with limit + 1 to check if there are more items
	query := `
		SELECT id, user_id, title, content, excerpt, slug, status, published_at, view_count, like_count, tags, featured_image_url, seo_data, created_at, updated_at
		FROM posts
		WHERE ($1::uuid IS NULL OR id > $1)
		ORDER BY id ASC
		LIMIT $2
	`

	rows, err := r.conn.Query(ctx, query, cursor, int32(limit+1))
	if err != nil {
		return nil, fmt.Errorf("pagination query failed: %w", err)
	}
	defer rows.Close()

	var items []Posts
	for rows.Next() {
		var p Posts
		err := rows.Scan(&p.Id, &p.UserId, &p.Title, &p.Content, &p.Excerpt, &p.Slug, &p.Status, &p.PublishedAt, &p.ViewCount, &p.LikeCount, &p.Tags, &p.FeaturedImageUrl, &p.SeoData, &p.CreatedAt, &p.UpdatedAt)
		if err != nil {
			return nil, err
		}
		items = append(items, p)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}

	// Check if there are more items
	hasMore := len(items) > limit
	if hasMore {
		items = items[:limit] // Remove the extra item
	}

	// Generate next cursor if there are more items
	var nextCursor string
	if hasMore && len(items) > 0 {
		lastItem := items[len(items)-1]
		nextCursor = encodeCursor(lastItem.GetID())
	}

	return &PaginationResult[Posts]{
		Items:      items,
		HasMore:    hasMore,
		NextCursor: nextCursor,
	}, nil
}
